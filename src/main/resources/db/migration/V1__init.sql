SET search_path TO public;

-- 1) Catalogs and core tables (in dependency order)
CREATE TABLE IF NOT EXISTS public.sport (
  id bigserial PRIMARY KEY,
  name text NOT NULL UNIQUE,
  display_name text NOT NULL,
  created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.app_user (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "location" varchar(255),
  "password" varchar(255) NOT NULL,
  preferred_sport varchar(100),
  username varchar(100) NOT NULL,
  avatar_url varchar(512),
  bio varchar(1000),
  rating_average double precision,
  rating_count integer,
  skill_level varchar(20),
  age integer,
  "position" varchar(100),
  contact_preference varchar(50),
  CONSTRAINT app_user_skill_level_check CHECK (skill_level::text = ANY (ARRAY['BEGINNER','INTERMEDIATE','ADVANCED','PRO']::text[])),
  CONSTRAINT uk_app_user_username UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.users (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email varchar(255),
  "password" varchar(255) NOT NULL,
  "role" varchar(255),
  username varchar(255) NOT NULL,
  CONSTRAINT uk_users_username UNIQUE (username)
);

-- Game needs sport + app_user
CREATE TABLE IF NOT EXISTS public.game (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz(6) NOT NULL,
  "location" varchar(255) NOT NULL,
  skill_level varchar(50),
  sport varchar(100) NOT NULL,
  start_time timestamptz(6) NOT NULL,
  updated_at timestamptz(6),
  "version" bigint,
  user_id bigint NOT NULL,
  latitude double precision,
  longitude double precision,
  "time" timestamptz(6),
  sport_id bigint NOT NULL,
  CONSTRAINT fk_game_user FOREIGN KEY (user_id) REFERENCES public.app_user(id),
  CONSTRAINT fk_game_sport FOREIGN KEY (sport_id) REFERENCES public.sport(id) ON UPDATE RESTRICT ON DELETE RESTRICT
);

-- 2) Function + trigger to auto-populate sport_id from sport text
CREATE OR REPLACE FUNCTION public.set_game_sport_id() RETURNS trigger AS $$
DECLARE
  matched_id BIGINT;
  unknown_id BIGINT;
BEGIN
  IF NEW.sport_id IS NULL THEN
    IF NEW.sport IS NOT NULL AND btrim(cast(NEW.sport AS text)) <> '' THEN
      SELECT s.id INTO matched_id
      FROM sport s
      WHERE lower(btrim(cast(NEW.sport AS text))) = lower(btrim(s.name))
      LIMIT 1;
    END IF;

    IF matched_id IS NULL THEN
      SELECT id INTO unknown_id FROM sport WHERE lower(name) = 'unknown' LIMIT 1;
      IF unknown_id IS NULL THEN
        INSERT INTO sport(name, display_name) VALUES ('unknown', 'Unknown')
        ON CONFLICT (name) DO NOTHING;
        SELECT id INTO unknown_id FROM sport WHERE lower(name) = 'unknown' LIMIT 1;
      END IF;
      NEW.sport_id = unknown_id;
    ELSE
      NEW.sport_id = matched_id;
    END IF;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trg_set_game_sport_id ON public.game;
CREATE TRIGGER trg_set_game_sport_id
BEFORE INSERT OR UPDATE ON public.game
FOR EACH ROW
EXECUTE FUNCTION public.set_game_sport_id();

-- 3) Other tables that depend on game/app_user
CREATE TABLE IF NOT EXISTS public.game_participants (
  game_id bigint NOT NULL,
  user_id bigint NOT NULL,
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  joined_at timestamptz(6) NOT NULL,
  CONSTRAINT game_participants_pkey PRIMARY KEY (game_id, user_id),
  CONSTRAINT uk_game_user UNIQUE (game_id, user_id),
  CONSTRAINT fk_gp_user FOREIGN KEY (user_id) REFERENCES public.app_user(id),
  CONSTRAINT fk_gp_game FOREIGN KEY (game_id) REFERENCES public.game(id)
);

CREATE TABLE IF NOT EXISTS public.notification (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "timestamp" timestamptz(6) NOT NULL,
  message varchar(500) NOT NULL,
  "read" boolean NOT NULL,
  read_at timestamptz(6),
  updated_at timestamptz(6) NOT NULL,
  "version" bigint,
  user_id bigint NOT NULL,
  CONSTRAINT fk_notification_user FOREIGN KEY (user_id) REFERENCES public.app_user(id)
);

CREATE TABLE IF NOT EXISTS public.player_rating (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "comment" varchar(1000),
  created_at timestamptz(6) NOT NULL,
  score integer NOT NULL,
  updated_at timestamptz(6) NOT NULL,
  game_id bigint NOT NULL,
  rated_id bigint NOT NULL,
  rater_id bigint NOT NULL,
  CONSTRAINT uk_rating_rater_rated_game UNIQUE (rater_id, rated_id, game_id),
  CONSTRAINT fk_rating_game FOREIGN KEY (game_id) REFERENCES public.game(id),
  CONSTRAINT fk_rating_rater FOREIGN KEY (rater_id) REFERENCES public.app_user(id),
  CONSTRAINT fk_rating_rated FOREIGN KEY (rated_id) REFERENCES public.app_user(id)
);

CREATE TABLE IF NOT EXISTS public.refresh_token (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  expires_at timestamptz(6) NOT NULL,
  replaced_by_token_hash varchar(255),
  revoked_at timestamptz(6),
  token_hash varchar(128) NOT NULL,
  user_id bigint NOT NULL,
  "version" bigint,
  CONSTRAINT uk_refresh_token_hash UNIQUE (token_hash),
  CONSTRAINT fk_refresh_token_user FOREIGN KEY (user_id) REFERENCES public.app_user(id)
);

-- Chat tables (both variants)
CREATE TABLE IF NOT EXISTS public.chat_message (
  id bigserial PRIMARY KEY,
  game_id bigint NOT NULL,
  sender_username varchar(100) NOT NULL,
  "content" varchar(2000) NOT NULL,
  sent_at timestamptz NOT NULL,
  CONSTRAINT fk_chat_message_game FOREIGN KEY (game_id) REFERENCES public.game(id)
);

CREATE TABLE IF NOT EXISTS public.chat_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "content" varchar(2000) NOT NULL,
  game_id bigint NOT NULL,
  sender varchar(100) NOT NULL,
  sent_at timestamptz(6) NOT NULL,
  client_id varchar(64),
  CONSTRAINT uk_chat_game_client UNIQUE (game_id, client_id),
  CONSTRAINT fk_chat_messages_game FOREIGN KEY (game_id) REFERENCES public.game(id)
);

CREATE TABLE IF NOT EXISTS public.chat_read_receipts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  read_at timestamptz(6) NOT NULL,
  reader varchar(100) NOT NULL,
  message_id bigint NOT NULL,
  CONSTRAINT uk_receipt_msg_reader UNIQUE (message_id, reader),
  CONSTRAINT fk_receipt_message FOREIGN KEY (message_id) REFERENCES public.chat_messages(id)
);

-- 4) Indexes (safe to create here; later migrations check existence before creating)
CREATE INDEX IF NOT EXISTS idx_game_sport_id ON public.game (sport_id);
CREATE INDEX IF NOT EXISTS idx_game_time     ON public.game ("time");

CREATE INDEX IF NOT EXISTS idx_notification_read ON public.notification ("read");
CREATE INDEX IF NOT EXISTS idx_notification_user ON public.notification (user_id);

CREATE INDEX IF NOT EXISTS idx_rating_game  ON public.player_rating (game_id);
CREATE INDEX IF NOT EXISTS idx_rating_rated ON public.player_rating (rated_id);

CREATE INDEX IF NOT EXISTS idx_refresh_token_user ON public.refresh_token (user_id);
CREATE INDEX IF NOT EXISTS idx_refresh_token_hash ON public.refresh_token (token_hash);

CREATE INDEX IF NOT EXISTS idx_chat_game_time ON public.chat_message (game_id, sent_at DESC);

CREATE INDEX IF NOT EXISTS idx_chat_client                    ON public.chat_messages (client_id);
CREATE INDEX IF NOT EXISTS idx_chat_game                      ON public.chat_messages (game_id);
CREATE INDEX IF NOT EXISTS idx_chat_sent_at                   ON public.chat_messages (sent_at);
CREATE INDEX IF NOT EXISTS idx_chat_game_sentat              ON public.chat_messages (game_id, sent_at);
CREATE INDEX IF NOT EXISTS idx_chat_messages_game_sentat_desc ON public.chat_messages (game_id, sent_at DESC);

CREATE INDEX IF NOT EXISTS idx_receipt_msg    ON public.chat_read_receipts (message_id);
CREATE INDEX IF NOT EXISTS idx_receipt_reader ON public.chat_read_receipts (reader);