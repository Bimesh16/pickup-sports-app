# -------------------------------------------------------------------
# App
# -------------------------------------------------------------------
spring.application.name=PickupSportsApp
server.port=8080

# Prefer UTC to avoid time zone bugs (OffsetDateTime/Instant still carry zone/UTC semantics)
spring.jackson.time-zone=UTC
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# -------------------------------------------------------------------
# DataSource (PostgreSQL) - use environment overrides in real deployments
# -------------------------------------------------------------------
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/your_db}
spring.datasource.username=${DB_USERNAME:your_db_user}
spring.datasource.password=${DB_PASSWORD:your_db_password}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP tuning (adjust to your infra)
spring.datasource.hikari.maximum-pool-size=${DB_MAX_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:2}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT_MS:300000}
spring.datasource.hikari.connection-timeout=${DB_CONN_TIMEOUT_MS:30000}

# -------------------------------------------------------------------
# JPA/Hibernate
# -------------------------------------------------------------------
# Use 'validate' or explicit migrations in production (e.g., Flyway). 'update' is convenient for dev.
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.open-in-view=false

# Avoid logging SQL in production; toggle via env as needed
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${HIBERNATE_FORMAT_SQL:false}
spring.jpa.properties.hibernate.default_batch_fetch_size=${HIBERNATE_BATCH_FETCH_SIZE:50}
spring.jpa.properties.hibernate.query.in_clause_parameter_padding=true

# -------------------------------------------------------------------
# Security / JWT
# -------------------------------------------------------------------
# Keep secrets out of source. Provide via environment or secrets manager.
# Token expiration in minutes. Issuer/audience must match what you enforce in filters/services.
security.jwt.secret=${JWT_SECRET:change-me-please-min-32-chars-secret}
security.jwt.issuer=${JWT_ISSUER:pickup-sports-app}
security.jwt.audience=${JWT_AUDIENCE:api}
security.jwt.expiration-minutes=${JWT_EXP_MINUTES:120}
security.jwt.header=${JWT_HEADER:Authorization}
security.jwt.prefix=${JWT_PREFIX:Bearer }

# -------------------------------------------------------------------
# CORS (adjust to exact front-end origins in production)
# -------------------------------------------------------------------
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000}
app.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,PATCH,DELETE,OPTIONS}
app.cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
app.cors.exposed-headers=${CORS_EXPOSED_HEADERS:Authorization,Content-Type}
app.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:false}

# -------------------------------------------------------------------
# XAI service (example placeholders)
# -------------------------------------------------------------------
xai.api.url=${XAI_API_URL:https://api.example.ai/v1/recommend}
xai.api.key=${XAI_API_KEY:your-xai-api-key}
xai.api.timeout-ms=${XAI_API_TIMEOUT_MS:10000}

# -------------------------------------------------------------------
# Logging
# -------------------------------------------------------------------
logging.level.root=${LOG_LEVEL_ROOT:INFO}
logging.level.org.springframework.web=${LOG_LEVEL_SPRING_WEB:INFO}
logging.level.org.springframework.security=${LOG_LEVEL_SPRING_SECURITY:INFO}
logging.level.org.hibernate.SQL=${LOG_LEVEL_HIBERNATE_SQL:OFF}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${LOG_LEVEL_HIBERNATE_BIND:OFF}
logging.level.com.bmessi.pickupsportsapp=${LOG_LEVEL_APP:DEBUG}

# Optional: JSON log pattern or custom patterns can be set here if you standardize logging format.
# logging.pattern.level=%5p [traceId=%X{traceId:-} spanId=%X{spanId:-}]