package com.bmessi.pickupsportsapp.repository.nepal;

import com.bmessi.pickupsportsapp.entity.nepal.HostActivity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Repository for Host Activity tracking operations.
 * 
 * <p>This repository enables comprehensive performance tracking and analytics
 * for City Champions, supporting commission calculations and business intelligence.</p>
 * 
 * @author Pickup Sports App Team
 * @version 2.0.0
 * @since 2.0.0
 */
@Repository
public interface HostActivityRepository extends JpaRepository<HostActivity, Long> {
    
    /**
     * Find all activities for a specific host.
     */
    List<HostActivity> findByCityHostId(Long cityHostId);
    
    /**
     * Find activities by host and type.
     */
    List<HostActivity> findByCityHostIdAndActivityType(Long cityHostId, HostActivity.ActivityType activityType);
    
    /**
     * Find recent activities for a host.
     */
    @Query("SELECT ha FROM HostActivity ha WHERE ha.cityHost.id = :hostId AND ha.createdAt >= :startDate ORDER BY ha.createdAt DESC")
    List<HostActivity> findRecentActivitiesByHost(@Param("hostId") Long hostId, @Param("startDate") OffsetDateTime startDate);
    
    /**
     * Find activities by host ordered by date (most recent first).
     */
    @Query("SELECT ha FROM HostActivity ha WHERE ha.cityHost.id = :hostId ORDER BY ha.createdAt DESC")
    List<HostActivity> findByHostIdOrderByCreatedAtDesc(@Param("hostId") Long hostId);
    
    /**
     * Calculate total revenue generated by a host.
     */
    @Query("SELECT COALESCE(SUM(ha.revenueGenerated), 0) FROM HostActivity ha WHERE ha.cityHost.id = :hostId")
    BigDecimal sumRevenueByHostId(@Param("hostId") Long hostId);
    
    /**
     * Calculate total commission earned by a host.
     */
    @Query("SELECT COALESCE(SUM(ha.commissionEarned), 0) FROM HostActivity ha WHERE ha.cityHost.id = :hostId")
    BigDecimal sumCommissionByHostId(@Param("hostId") Long hostId);
    
    /**
     * Count total games managed by a host.
     */
    @Query("SELECT COUNT(ha) FROM HostActivity ha WHERE ha.cityHost.id = :hostId AND ha.activityType = 'GAME_MANAGED'")
    Long countGamesManagedByHost(@Param("hostId") Long hostId);
    
    /**
     * Find activities with excellent ratings.
     */
    @Query("SELECT ha FROM HostActivity ha WHERE ha.ratingReceived >= :minRating ORDER BY ha.ratingReceived DESC")
    List<HostActivity> findActivitiesWithExcellentRatings(@Param("minRating") BigDecimal minRating);
    
    /**
     * Find high-value activities (revenue above threshold).
     */
    @Query("SELECT ha FROM HostActivity ha WHERE ha.revenueGenerated >= :minRevenue ORDER BY ha.revenueGenerated DESC")
    List<HostActivity> findHighValueActivities(@Param("minRevenue") BigDecimal minRevenue);
    
    /**
     * Get activity statistics by type for a host.
     */
    @Query("SELECT ha.activityType, COUNT(ha), COALESCE(SUM(ha.revenueGenerated), 0), COALESCE(AVG(ha.ratingReceived), 0) FROM HostActivity ha WHERE ha.cityHost.id = :hostId GROUP BY ha.activityType")
    List<Object[]> getActivityStatsByHost(@Param("hostId") Long hostId);
    
    /**
     * Find activities in a date range.
     */
    @Query("SELECT ha FROM HostActivity ha WHERE ha.cityHost.id = :hostId AND ha.createdAt BETWEEN :startDate AND :endDate ORDER BY ha.createdAt DESC")
    List<HostActivity> findActivitiesInDateRange(@Param("hostId") Long hostId, @Param("startDate") OffsetDateTime startDate, @Param("endDate") OffsetDateTime endDate);
    
    /**
     * Find activities by game.
     */
    List<HostActivity> findByGameId(Long gameId);
    
    /**
     * Find activities by venue.
     */
    List<HostActivity> findByVenueId(Long venueId);
    
    /**
     * Get monthly activity summary for a host.
     */
    @Query("SELECT DATE_TRUNC('month', ha.createdAt), COUNT(ha), COALESCE(SUM(ha.revenueGenerated), 0), COALESCE(SUM(ha.commissionEarned), 0) FROM HostActivity ha WHERE ha.cityHost.id = :hostId GROUP BY DATE_TRUNC('month', ha.createdAt) ORDER BY DATE_TRUNC('month', ha.createdAt) DESC")
    List<Object[]> getMonthlyActivitySummary(@Param("hostId") Long hostId);
    
    /**
     * Find hosts with most activity in a time period.
     */
    @Query("SELECT ha.cityHost.id, COUNT(ha), COALESCE(SUM(ha.revenueGenerated), 0) FROM HostActivity ha WHERE ha.createdAt >= :since GROUP BY ha.cityHost.id ORDER BY COUNT(ha) DESC")
    List<Object[]> findMostActiveHosts(@Param("since") OffsetDateTime since);
    
    /**
     * Get average rating for a host.
     */
    @Query("SELECT COALESCE(AVG(ha.ratingReceived), 0) FROM HostActivity ha WHERE ha.cityHost.id = :hostId AND ha.ratingReceived IS NOT NULL")
    Double getAverageRatingForHost(@Param("hostId") Long hostId);
    
    /**
     * Count activities by type for a host.
     */
    @Query("SELECT COUNT(ha) FROM HostActivity ha WHERE ha.cityHost.id = :hostId AND ha.activityType = :activityType")
    Long countActivitiesByTypeAndHost(@Param("hostId") Long hostId, @Param("activityType") HostActivity.ActivityType activityType);
}