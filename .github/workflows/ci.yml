name: CI

on:
  push:
    branches: [ main, feature/**, bugfix/** ]
  pull_request:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Unit and WebMvc tests
        run: ./mvnw -q -DskipITs test

  smoke-compose:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Build (skip tests; smoke runs against compose)
        run: ./mvnw -q -DskipTests clean package
      - name: Dev bootstrap
        run: ./scripts/dev-bootstrap.sh

      - name: Quickstart smoke test
        run: USER=jane@example.com PASS=password ./scripts/quickstart.sh

      - name: Check frontend
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || true)
            if [ "$code" = "200" ]; then echo "Frontend ready!"; break; fi
            sleep 2
          done
          curl -s http://localhost:3000 || true
      - name: Generate OpenAPI JSON and TypeScript client (optional)
        if: always()
        run: |
          ./mvnw -q -Pclient-sdk -DskipTests package || true
      - name: Upload OpenAPI JSON
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openapi-json
          path: target/openapi.json
          if-no-files-found: warn
      - name: Upload TypeScript client
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: typescript-client
          path: web/api
          if-no-files-found: warn
      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.dev.yml down -v
      - name: Build Docker image
        run: |
          echo "Building Docker image (no push in this workflow)..."
          docker build -t pickup-sports-app:ci .

      # Optionally push to GHCR (uncomment and set secrets)
      # - name: Log in to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      # - name: Push image
      #   run: |
      #     IMAGE=ghcr.io/${{ github.repository_owner }}/pickup-sports-app:${{ github.sha }}
      #     docker tag pickup-sports-app:ci $IMAGE
      #     docker push $IMAGE

